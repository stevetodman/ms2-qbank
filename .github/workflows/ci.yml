name: CI - Tests and Linting

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run user authentication tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          SECRET_KEY: test-secret-key-for-ci
        run: |
          pytest tests/test_user_auth.py -v --cov=src/users --cov-report=term-missing

      - name: Run flashcard tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          pytest tests/test_flashcards.py -v --cov=src/flashcards --cov-report=term-missing

      - name: Run assessment tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          pytest tests/test_assessments_api.py tests/test_assessment_database.py -v --cov=src/assessments --cov-report=term-missing

      - name: Run analytics tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          pytest tests/test_analytics_api.py tests/test_analytics_cli.py tests/test_user_analytics.py -v --cov=src/analytics --cov-report=term-missing

      - name: Run library tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          pytest tests/test_library_api.py tests/test_library_database.py -v --cov=src/library --cov-report=term-missing

      - name: Run planner tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          pytest tests/test_planner.py -v --cov=src/planner --cov-report=term-missing

      - name: Run video tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          pytest tests/test_videos.py -v --cov=src/videos --cov-report=term-missing

      - name: Run review tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          pytest tests/test_review_workflow.py -v --cov=src/reviews --cov-report=term-missing

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: backend
          fail_ci_if_error: false

  python-linting:
    name: Python Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort mypy

      - name: Run Ruff (fast linter)
        run: |
          ruff check src/ tests/ --output-format=github
        continue-on-error: true

      - name: Check code formatting with Black
        run: |
          black --check src/ tests/
        continue-on-error: true

      - name: Check import sorting with isort
        run: |
          isort --check-only src/ tests/
        continue-on-error: true

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./web

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type check
        run: npm run type-check
        continue-on-error: true

      - name: Run linting
        run: npm run lint
        continue-on-error: true

      - name: Run unit tests
        run: npm test -- --passWithNoTests
        continue-on-error: true

      - name: Build frontend
        run: npm run build

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          docker compose build

      - name: Start services
        run: |
          docker compose up -d
          sleep 30

      - name: Check service health
        run: |
          docker compose ps
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:8001/health || exit 1
          curl -f http://localhost:8002/health || exit 1

      - name: View logs on failure
        if: failure()
        run: |
          docker compose logs

      - name: Shutdown services
        if: always()
        run: |
          docker compose down -v
